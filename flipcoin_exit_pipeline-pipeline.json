{
  "pipelineSpec": {
    "components": {
      "comp-condition-1": {
        "dag": {
          "tasks": {
            "condition-2": {
              "componentRef": {
                "name": "comp-condition-2"
              },
              "dependentTasks": [
                "get-random-int-op"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  },
                  "pipelineparam--get-random-int-op-Output": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "get-random-int-op"
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "condition-2"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--get-random-int-op-Output'].int_value > 5"
              }
            },
            "condition-3": {
              "componentRef": {
                "name": "comp-condition-3"
              },
              "dependentTasks": [
                "get-random-int-op"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  },
                  "pipelineparam--get-random-int-op-Output": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "get-random-int-op"
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "condition-3"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--get-random-int-op-Output'].int_value <= 5"
              }
            },
            "get-random-int-op": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-get-random-int-op"
              },
              "inputs": {
                "parameters": {
                  "maximum": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "9"
                      }
                    }
                  },
                  "minimum": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "get-random-int-op"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-2": {
        "dag": {
          "tasks": {
            "print-op": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op"
              },
              "inputs": {
                "parameters": {
                  "message": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "heads and {{$.inputs.parameters['pipelineparam--get-random-int-op-Output']}} > 5!"
                      }
                    }
                  },
                  "pipelineparam--get-random-int-op-Output": {
                    "componentInputParameter": "pipelineparam--get-random-int-op-Output"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--get-random-int-op-Output": {
              "type": "INT"
            }
          }
        }
      },
      "comp-condition-3": {
        "dag": {
          "tasks": {
            "print-op-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-2"
              },
              "inputs": {
                "parameters": {
                  "message": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "heads and {{$.inputs.parameters['pipelineparam--get-random-int-op-Output']}} <= 5!"
                      }
                    }
                  },
                  "pipelineparam--get-random-int-op-Output": {
                    "componentInputParameter": "pipelineparam--get-random-int-op-Output"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-2"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--get-random-int-op-Output": {
              "type": "INT"
            }
          }
        }
      },
      "comp-condition-4": {
        "dag": {
          "tasks": {
            "condition-5": {
              "componentRef": {
                "name": "comp-condition-5"
              },
              "dependentTasks": [
                "get-random-int-op-2"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  },
                  "pipelineparam--get-random-int-op-2-Output": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "get-random-int-op-2"
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "condition-5"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--get-random-int-op-2-Output'].int_value > 15"
              }
            },
            "condition-6": {
              "componentRef": {
                "name": "comp-condition-6"
              },
              "dependentTasks": [
                "get-random-int-op-2"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  },
                  "pipelineparam--get-random-int-op-2-Output": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "get-random-int-op-2"
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "condition-6"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--get-random-int-op-2-Output'].int_value <= 15"
              }
            },
            "get-random-int-op-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-get-random-int-op-2"
              },
              "inputs": {
                "parameters": {
                  "maximum": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "19"
                      }
                    }
                  },
                  "minimum": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "10"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "get-random-int-op-2"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-5": {
        "dag": {
          "tasks": {
            "print-op-3": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-3"
              },
              "inputs": {
                "parameters": {
                  "message": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "tails and {{$.inputs.parameters['pipelineparam--get-random-int-op-2-Output']}} > 15!"
                      }
                    }
                  },
                  "pipelineparam--get-random-int-op-2-Output": {
                    "componentInputParameter": "pipelineparam--get-random-int-op-2-Output"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-3"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--get-random-int-op-2-Output": {
              "type": "INT"
            }
          }
        }
      },
      "comp-condition-6": {
        "dag": {
          "tasks": {
            "print-op-4": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-4"
              },
              "inputs": {
                "parameters": {
                  "message": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "tails and {{$.inputs.parameters['pipelineparam--get-random-int-op-2-Output']}} <= 15!"
                      }
                    }
                  },
                  "pipelineparam--get-random-int-op-2-Output": {
                    "componentInputParameter": "pipelineparam--get-random-int-op-2-Output"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-4"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--get-random-int-op-2-Output": {
              "type": "INT"
            }
          }
        }
      },
      "comp-flip-coin-op": {
        "executorLabel": "exec-flip-coin-op",
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-get-random-int-op": {
        "executorLabel": "exec-get-random-int-op",
        "inputDefinitions": {
          "parameters": {
            "maximum": {
              "type": "INT"
            },
            "minimum": {
              "type": "INT"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "INT"
            }
          }
        }
      },
      "comp-get-random-int-op-2": {
        "executorLabel": "exec-get-random-int-op-2",
        "inputDefinitions": {
          "parameters": {
            "maximum": {
              "type": "INT"
            },
            "minimum": {
              "type": "INT"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "INT"
            }
          }
        }
      },
      "comp-print-op": {
        "executorLabel": "exec-print-op",
        "inputDefinitions": {
          "parameters": {
            "message": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-2": {
        "executorLabel": "exec-print-op-2",
        "inputDefinitions": {
          "parameters": {
            "message": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-3": {
        "executorLabel": "exec-print-op-3",
        "inputDefinitions": {
          "parameters": {
            "message": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-4": {
        "executorLabel": "exec-print-op-4",
        "inputDefinitions": {
          "parameters": {
            "message": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-flip-coin-op": {
          "container": {
            "args": [
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def flip_coin_op():\n    \"\"\"Flip a coin and output heads or tails randomly.\"\"\"\n    import random\n    result = random.choice(['heads', 'tails'])\n    print(result)\n    return result\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(\n            str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Flip coin op', description='Flip a coin and output heads or tails randomly.')\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = flip_coin_op(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-get-random-int-op": {
          "container": {
            "args": [
              "--minimum",
              "{{$.inputs.parameters['minimum']}}",
              "--maximum",
              "{{$.inputs.parameters['maximum']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def get_random_int_op(minimum, maximum):\n    \"\"\"Generate a random number between minimum and maximum (inclusive).\"\"\"\n    import random\n    result = random.randint(minimum, maximum)\n    print(result)\n    return result\n\ndef _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value, int):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of int.'.format(\n            str(int_value), str(type(int_value))))\n    return str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Get random int op', description='Generate a random number between minimum and maximum (inclusive).')\n_parser.add_argument(\"--minimum\", dest=\"minimum\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--maximum\", dest=\"maximum\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = get_random_int_op(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-get-random-int-op-2": {
          "container": {
            "args": [
              "--minimum",
              "{{$.inputs.parameters['minimum']}}",
              "--maximum",
              "{{$.inputs.parameters['maximum']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def get_random_int_op(minimum, maximum):\n    \"\"\"Generate a random number between minimum and maximum (inclusive).\"\"\"\n    import random\n    result = random.randint(minimum, maximum)\n    print(result)\n    return result\n\ndef _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value, int):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of int.'.format(\n            str(int_value), str(type(int_value))))\n    return str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Get random int op', description='Generate a random number between minimum and maximum (inclusive).')\n_parser.add_argument(\"--minimum\", dest=\"minimum\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--maximum\", dest=\"maximum\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = get_random_int_op(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op": {
          "container": {
            "args": [
              "--message",
              "{{$.inputs.parameters['message']}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(message):\n    \"\"\"Print a message.\"\"\"\n    print(message)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='Print a message.')\n_parser.add_argument(\"--message\", dest=\"message\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-2": {
          "container": {
            "args": [
              "--message",
              "{{$.inputs.parameters['message']}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(message):\n    \"\"\"Print a message.\"\"\"\n    print(message)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='Print a message.')\n_parser.add_argument(\"--message\", dest=\"message\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-3": {
          "container": {
            "args": [
              "--message",
              "{{$.inputs.parameters['message']}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(message):\n    \"\"\"Print a message.\"\"\"\n    print(message)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='Print a message.')\n_parser.add_argument(\"--message\", dest=\"message\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-4": {
          "container": {
            "args": [
              "--message",
              "{{$.inputs.parameters['message']}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(message):\n    \"\"\"Print a message.\"\"\"\n    print(message)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='Print a message.')\n_parser.add_argument(\"--message\", dest=\"message\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "conditional-execution-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "condition-1": {
            "componentRef": {
              "name": "comp-condition-1"
            },
            "dependentTasks": [
              "flip-coin-op"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--flip-coin-op-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "flip-coin-op"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "condition-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value == 'heads'"
            }
          },
          "condition-4": {
            "componentRef": {
              "name": "comp-condition-4"
            },
            "dependentTasks": [
              "flip-coin-op"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--flip-coin-op-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "flip-coin-op"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "condition-4"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value == 'tails'"
            }
          },
          "flip-coin-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-flip-coin-op"
            },
            "taskInfo": {
              "name": "flip-coin-op"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.12"
  },
  "runtimeConfig": {}
}